# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      #        cache: 'pnpm'
      #        # The action defaults to search for the dependency file
      #        # (package-lock.json or yarn.lock) in the repository root, and uses
      #        # its hash as a part of the cache key.
      #        # https://github.com/actions/setup-node#caching-packages-dependencies
      #        cache-dependency-path: "./pnpm-lock.yaml"
      - name: Build
        run: |
          npm install -g pnpm
          pnpm install
          pnpm run build
      - name: Delete files
        run: sshpass -p ${{ secrets.HOST_USER_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ vars.HOST_USER_NAME }}@${{ vars.HOST }} "cd ${{ vars.DEPLOY_PATH }} && rm -rf ${{ vars.DEPLOY_PATH }}/*"

      - name: Upload files
        run: sshpass -p ${{ secrets.HOST_USER_PASSWORD }} scp -r -o StrictHostKeyChecking=no ./dist/* ${{ vars.HOST_USER_NAME }}@${{ vars.HOST}}:${{ vars.DEPLOY_PATH }}


